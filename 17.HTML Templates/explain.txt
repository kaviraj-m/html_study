Module 17: HTML Templates
The <template> element in HTML is used to define reusable HTML code fragments. The content inside the <template> tag is not rendered when the page loads, but can be activated later using JavaScript. This is useful for creating reusable HTML structures like components, which can be inserted dynamically into the DOM as needed.

Key Points:
<template> Element: The content inside the <template> element is inert, meaning it does not render on the page until it is explicitly added to the DOM.
Reusable Snippets: Templates allow you to store HTML code that can be reused multiple times in different places in a web application.
Dynamic Insertion: The content can be activated and inserted into the DOM using JavaScript, making it useful for dynamically generated web content.
Syntax:

<template>
    <!-- Reusable HTML code goes here -->
</template>

Explanation:
Template Element: The <template> tag holds the structure of a card component (<div> with class card containing a title and a paragraph). This part will not be displayed on the page until JavaScript adds it to the DOM.

JavaScript for Activation: The function addCard() retrieves the content of the template and clones it. This cloned content is then appended to the #cardContainer element, dynamically adding the card to the page each time the button is clicked.

Reusable Components: This example allows you to reuse the card structure multiple times by dynamically adding it as needed, making it easier to manage repeated UI elements.

Benefits of Using HTML Templates:
Code Reusability: Templates make it easier to manage repetitive HTML structures, which can save development time.
Separation of HTML and JavaScript: You can design the structure within HTML and control when and how it gets rendered using JavaScript.
Performance: Since template content is not rendered until needed, it can help optimize the performance of your page, especially when dealing with large amounts of data or content.